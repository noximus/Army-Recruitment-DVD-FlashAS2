import util.xml.XMLSA;import mx.events.EventDispatcher;import mx.transitions.Tween;import mx.transitions.easing.None;import mx.transitions.easing.Regular;import ui.nav.NavigationItem;class ui.nav.Navigation extends MovieClip{	private var mc:MovieClip;	private var _xml:XMLSA;	private var settings:Settings;	public var mc_mask:MovieClip;	public var mc_camostripe:MovieClip;	private var _selectedNavitem:String;	private var tween:Object;	private var _activeNavitem:NavigationItem;	//buttons	public var mc_basic,mc_ait, mc_careers, mc_benefits, mc_life, mc_parents:MovieClip;	public function Navigation(){		init();	}	private function init():Void{				EventDispatcher.initialize(this);				tween = new Object();				mc = this;		settings = new Settings();		settings.nav=this;			}	private function ParseXML():Void{						var item:XMLSA;		var navitem:MovieClip;		for(var i=0;i<xml.items.item.length;i++){			//attach xml to the appropriate movieclip			/*						<items>				<item>					<title>BASIC TRAINING</title>					<target>mc_basic</target>					<xml>[section]/basic.xml</xml>				</item>						*/			navitem = this[xml.items.item[i].target.getValue()];			navitem.xml=xml.items.item[i];			//trace("item:" + this[xml.items.item.target.getValue()] + " xml:" + xml.items.item[i]);			//trace("navitem:" + navitem + " xml:" + navitem.xml);			//navitem.fnord();		}	}	public function UnselectActiveItem():Void{		activeNavitem.Unselect();	}	public function Render():Void{						/*				go to the proper frame, load the xml for this section, and prepare those clips.				*/				gotoAndStop(settings.sectionID);				xml = settings.ref.GetMenuXML("menuitems/" + settings.sectionID);							}	public function In():Void{								this._visible=true;		tween.y = new Tween(this,"_y",Regular.easeOut,this._y+5,this._y,7,false);		tween.alpha = new Tween(this,"_alpha",Regular.easeOut,0,100,7,false);		tween.alpha.onMotionFinished=function(){			this.obj.SelectNavItem(this.obj.selectedNavitem);		}		settings.mainCamostripe.In();	}	public function Out():Void{						//we're going back to the subsection				//so unselect the navitem that was selected		UnselectActiveItem();				//make sure that we don't fade out, then fade in content next time.						tween.alpha = new Tween(this,"_y",Regular.easeIn,this._y,this._y+5,3,false);		tween.alpha.onMotionFinished=function(){			this.obj._y=this.obj._y-5;			this.obj._visible = false;		}				//kill the camostripe on the right side		settings.mainCamostripe.Out();	}		public function SelectNavItem(id:String):Void{		broadcast({type:"navitem",functionName:"Select",id:id});	}	public function dispatchEvent():Void{}	public function addEventListener():Void{}	public function removeEventListener():Void{}	public function broadcast(broadcastObj:Object):Void{		dispatchEvent(broadcastObj);	}		public function get xml():XMLSA{		return _xml;	}	public function set xml(val:XMLSA):Void{		_xml=val;		ParseXML();	}	public function get selectedNavitem():String{		return _selectedNavitem;	}	public function set selectedNavitem(val:String):Void{		_selectedNavitem=val;	}	public function get activeNavitem():NavigationItem{		return _activeNavitem	}	public function set activeNavitem(val:NavigationItem):Void{		_activeNavitem=val;	}	}